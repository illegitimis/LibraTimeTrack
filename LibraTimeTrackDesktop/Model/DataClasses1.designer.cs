#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LibraTimeTrack.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LibraTimeTrack")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void UpdateEstimation(Estimation instance);
    partial void DeleteEstimation(Estimation instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertItemType(ItemType instance);
    partial void UpdateItemType(ItemType instance);
    partial void DeleteItemType(ItemType instance);
    partial void InsertLoginHistory(LoginHistory instance);
    partial void UpdateLoginHistory(LoginHistory instance);
    partial void DeleteLoginHistory(LoginHistory instance);
    partial void InsertPerson(Person instance);
    partial void UpdatePerson(Person instance);
    partial void DeletePerson(Person instance);
    partial void InsertPM(PM instance);
    partial void UpdatePM(PM instance);
    partial void DeletePM(PM instance);
    partial void InsertPM2RT(PM2RT instance);
    partial void UpdatePM2RT(PM2RT instance);
    partial void DeletePM2RT(PM2RT instance);
    partial void InsertRT(RT instance);
    partial void UpdateRT(RT instance);
    partial void DeleteRT(RT instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTeams2Person(Teams2Person instance);
    partial void UpdateTeams2Person(Teams2Person instance);
    partial void DeleteTeams2Person(Teams2Person instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LibraTimeTrack.Properties.Settings.Default.LibraTimeTrackConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<Estimation> Estimations
		{
			get
			{
				return this.GetTable<Estimation>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<ItemType> ItemTypes
		{
			get
			{
				return this.GetTable<ItemType>();
			}
		}
		
		public System.Data.Linq.Table<LoginHistory> LoginHistories
		{
			get
			{
				return this.GetTable<LoginHistory>();
			}
		}
		
		public System.Data.Linq.Table<Person> Persons
		{
			get
			{
				return this.GetTable<Person>();
			}
		}
		
		public System.Data.Linq.Table<PM> PMs
		{
			get
			{
				return this.GetTable<PM>();
			}
		}
		
		public System.Data.Linq.Table<PM2RT> PM2RTs
		{
			get
			{
				return this.GetTable<PM2RT>();
			}
		}
		
		public System.Data.Linq.Table<RT> RTs
		{
			get
			{
				return this.GetTable<RT>();
			}
		}
		
		public System.Data.Linq.Table<Team> Teams
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Teams2Person> Teams2Persons
		{
			get
			{
				return this.GetTable<Teams2Person>();
			}
		}
		
		private void InsertEstimation(Estimation obj)
		{
			this.insertEstimation(((System.Nullable<System.DateTime>)(obj.Date)), obj.PersonLogin, ((System.Nullable<byte>)(obj.NoHours)), ((System.Nullable<int>)(obj.ItemId)));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertActivity", IsComposable=true)]
		public object insertActivity([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(30)")] string login, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> hrs, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> item)
		{
			return ((object)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, login, hrs, item).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertEstimation")]
		public int insertEstimation([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Date")] System.Nullable<System.DateTime> date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(30)")] string login, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="TinyInt")] System.Nullable<byte> hrs, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> item)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), date, login, hrs, item);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertPM")]
		public int insertPM([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemIdentity", DbType="Int")] ref System.Nullable<int> itemIdentity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemType", DbType="TinyInt")] System.Nullable<byte> itemType, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="QmId", DbType="VarChar(10)")] string qmId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, itemIdentity, itemType, qmId);
			itemIdentity = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.insertRT")]
		public int insertRT([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Id", DbType="Int")] System.Nullable<int> id, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Name", DbType="VarChar(100)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemIdentity", DbType="Int")] ref System.Nullable<int> itemIdentity, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="ItemType", DbType="TinyInt")] System.Nullable<byte> itemType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, name, itemIdentity, itemType);
			itemIdentity = ((System.Nullable<int>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activities")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private System.Nullable<short> _Year;
		
		private System.Nullable<byte> _Month;
		
		private string _MonthName;
		
		private System.Nullable<short> _DayOfYear;
		
		private System.Nullable<byte> _DayOfMonth;
		
		private System.Nullable<byte> _WeekNo;
		
		private string _WeekDay;
		
		private System.Nullable<byte> _DayOfWeek;
		
		private string _PersonLogin;
		
		private byte _NoHours;
		
		private int _ItemId;
		
		private System.Nullable<byte> _Quarter;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnYearChanging(System.Nullable<short> value);
    partial void OnYearChanged();
    partial void OnMonthChanging(System.Nullable<byte> value);
    partial void OnMonthChanged();
    partial void OnMonthNameChanging(string value);
    partial void OnMonthNameChanged();
    partial void OnDayOfYearChanging(System.Nullable<short> value);
    partial void OnDayOfYearChanged();
    partial void OnDayOfMonthChanging(System.Nullable<byte> value);
    partial void OnDayOfMonthChanged();
    partial void OnWeekNoChanging(System.Nullable<byte> value);
    partial void OnWeekNoChanged();
    partial void OnWeekDayChanging(string value);
    partial void OnWeekDayChanged();
    partial void OnDayOfWeekChanging(System.Nullable<byte> value);
    partial void OnDayOfWeekChanged();
    partial void OnPersonLoginChanging(string value);
    partial void OnPersonLoginChanged();
    partial void OnNoHoursChanging(byte value);
    partial void OnNoHoursChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnQuarterChanging(System.Nullable<byte> value);
    partial void OnQuarterChanged();
    #endregion
		
		public Activity()
		{
			this._Item = default(EntityRef<Item>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt")]
		public System.Nullable<short> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="TinyInt")]
		public System.Nullable<byte> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthName", DbType="Char(10)")]
		public string MonthName
		{
			get
			{
				return this._MonthName;
			}
			set
			{
				if ((this._MonthName != value))
				{
					this.OnMonthNameChanging(value);
					this.SendPropertyChanging();
					this._MonthName = value;
					this.SendPropertyChanged("MonthName");
					this.OnMonthNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfYear", DbType="SmallInt")]
		public System.Nullable<short> DayOfYear
		{
			get
			{
				return this._DayOfYear;
			}
			set
			{
				if ((this._DayOfYear != value))
				{
					this.OnDayOfYearChanging(value);
					this.SendPropertyChanging();
					this._DayOfYear = value;
					this.SendPropertyChanged("DayOfYear");
					this.OnDayOfYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfMonth", DbType="TinyInt")]
		public System.Nullable<byte> DayOfMonth
		{
			get
			{
				return this._DayOfMonth;
			}
			set
			{
				if ((this._DayOfMonth != value))
				{
					this.OnDayOfMonthChanging(value);
					this.SendPropertyChanging();
					this._DayOfMonth = value;
					this.SendPropertyChanged("DayOfMonth");
					this.OnDayOfMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekNo", DbType="TinyInt")]
		public System.Nullable<byte> WeekNo
		{
			get
			{
				return this._WeekNo;
			}
			set
			{
				if ((this._WeekNo != value))
				{
					this.OnWeekNoChanging(value);
					this.SendPropertyChanging();
					this._WeekNo = value;
					this.SendPropertyChanged("WeekNo");
					this.OnWeekNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDay", DbType="Char(10)")]
		public string WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="TinyInt")]
		public System.Nullable<byte> DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonLogin", DbType="Char(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonLogin
		{
			get
			{
				return this._PersonLogin;
			}
			set
			{
				if ((this._PersonLogin != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonLoginChanging(value);
					this.SendPropertyChanging();
					this._PersonLogin = value;
					this.SendPropertyChanged("PersonLogin");
					this.OnPersonLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoHours", DbType="TinyInt NOT NULL")]
		public byte NoHours
		{
			get
			{
				return this._NoHours;
			}
			set
			{
				if ((this._NoHours != value))
				{
					this.OnNoHoursChanging(value);
					this.SendPropertyChanging();
					this._NoHours = value;
					this.SendPropertyChanged("NoHours");
					this.OnNoHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quarter", DbType="TinyInt")]
		public System.Nullable<byte> Quarter
		{
			get
			{
				return this._Quarter;
			}
			set
			{
				if ((this._Quarter != value))
				{
					this.OnQuarterChanging(value);
					this.SendPropertyChanging();
					this._Quarter = value;
					this.SendPropertyChanged("Quarter");
					this.OnQuarterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Activity", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Activity", Storage="_Person", ThisKey="PersonLogin", OtherKey="Login", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Activities.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Activities.Add(this);
						this._PersonLogin = value.Login;
					}
					else
					{
						this._PersonLogin = default(string);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Estimations")]
	public partial class Estimation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private System.Nullable<short> _Year;
		
		private System.Nullable<byte> _Month;
		
		private string _MonthName;
		
		private System.Nullable<short> _DayOfYear;
		
		private System.Nullable<byte> _DayOfMonth;
		
		private System.Nullable<byte> _WeekNo;
		
		private string _WeekDay;
		
		private System.Nullable<byte> _DayOfWeek;
		
		private string _PersonLogin;
		
		private byte _NoHours;
		
		private int _ItemId;
		
		private System.Nullable<byte> _Quarter;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnYearChanging(System.Nullable<short> value);
    partial void OnYearChanged();
    partial void OnMonthChanging(System.Nullable<byte> value);
    partial void OnMonthChanged();
    partial void OnMonthNameChanging(string value);
    partial void OnMonthNameChanged();
    partial void OnDayOfYearChanging(System.Nullable<short> value);
    partial void OnDayOfYearChanged();
    partial void OnDayOfMonthChanging(System.Nullable<byte> value);
    partial void OnDayOfMonthChanged();
    partial void OnWeekNoChanging(System.Nullable<byte> value);
    partial void OnWeekNoChanged();
    partial void OnWeekDayChanging(string value);
    partial void OnWeekDayChanged();
    partial void OnDayOfWeekChanging(System.Nullable<byte> value);
    partial void OnDayOfWeekChanged();
    partial void OnPersonLoginChanging(string value);
    partial void OnPersonLoginChanged();
    partial void OnNoHoursChanging(byte value);
    partial void OnNoHoursChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnQuarterChanging(System.Nullable<byte> value);
    partial void OnQuarterChanged();
    #endregion
		
		public Estimation()
		{
			this._Item = default(EntityRef<Item>);
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="SmallInt")]
		public System.Nullable<short> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="TinyInt")]
		public System.Nullable<byte> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthName", DbType="Char(10)")]
		public string MonthName
		{
			get
			{
				return this._MonthName;
			}
			set
			{
				if ((this._MonthName != value))
				{
					this.OnMonthNameChanging(value);
					this.SendPropertyChanging();
					this._MonthName = value;
					this.SendPropertyChanged("MonthName");
					this.OnMonthNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfYear", DbType="SmallInt")]
		public System.Nullable<short> DayOfYear
		{
			get
			{
				return this._DayOfYear;
			}
			set
			{
				if ((this._DayOfYear != value))
				{
					this.OnDayOfYearChanging(value);
					this.SendPropertyChanging();
					this._DayOfYear = value;
					this.SendPropertyChanged("DayOfYear");
					this.OnDayOfYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfMonth", DbType="TinyInt")]
		public System.Nullable<byte> DayOfMonth
		{
			get
			{
				return this._DayOfMonth;
			}
			set
			{
				if ((this._DayOfMonth != value))
				{
					this.OnDayOfMonthChanging(value);
					this.SendPropertyChanging();
					this._DayOfMonth = value;
					this.SendPropertyChanged("DayOfMonth");
					this.OnDayOfMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekNo", DbType="TinyInt")]
		public System.Nullable<byte> WeekNo
		{
			get
			{
				return this._WeekNo;
			}
			set
			{
				if ((this._WeekNo != value))
				{
					this.OnWeekNoChanging(value);
					this.SendPropertyChanging();
					this._WeekNo = value;
					this.SendPropertyChanged("WeekNo");
					this.OnWeekNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WeekDay", DbType="Char(10)")]
		public string WeekDay
		{
			get
			{
				return this._WeekDay;
			}
			set
			{
				if ((this._WeekDay != value))
				{
					this.OnWeekDayChanging(value);
					this.SendPropertyChanging();
					this._WeekDay = value;
					this.SendPropertyChanged("WeekDay");
					this.OnWeekDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DayOfWeek", DbType="TinyInt")]
		public System.Nullable<byte> DayOfWeek
		{
			get
			{
				return this._DayOfWeek;
			}
			set
			{
				if ((this._DayOfWeek != value))
				{
					this.OnDayOfWeekChanging(value);
					this.SendPropertyChanging();
					this._DayOfWeek = value;
					this.SendPropertyChanged("DayOfWeek");
					this.OnDayOfWeekChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonLogin", DbType="Char(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PersonLogin
		{
			get
			{
				return this._PersonLogin;
			}
			set
			{
				if ((this._PersonLogin != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersonLoginChanging(value);
					this.SendPropertyChanging();
					this._PersonLogin = value;
					this.SendPropertyChanged("PersonLogin");
					this.OnPersonLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoHours", DbType="TinyInt NOT NULL")]
		public byte NoHours
		{
			get
			{
				return this._NoHours;
			}
			set
			{
				if ((this._NoHours != value))
				{
					this.OnNoHoursChanging(value);
					this.SendPropertyChanging();
					this._NoHours = value;
					this.SendPropertyChanged("NoHours");
					this.OnNoHoursChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quarter", DbType="TinyInt")]
		public System.Nullable<byte> Quarter
		{
			get
			{
				return this._Quarter;
			}
			set
			{
				if ((this._Quarter != value))
				{
					this.OnQuarterChanging(value);
					this.SendPropertyChanging();
					this._Quarter = value;
					this.SendPropertyChanged("Quarter");
					this.OnQuarterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Estimation", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Estimations.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Estimations.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Estimation", Storage="_Person", ThisKey="PersonLogin", OtherKey="Login", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Estimations.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Estimations.Add(this);
						this._PersonLogin = value.Login;
					}
					else
					{
						this._PersonLogin = default(string);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _RTId;
		
		private System.Nullable<int> _PMId;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<Estimation> _Estimations;
		
		private EntityRef<PM> _PM;
		
		private EntityRef<RT> _RT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnRTIdChanging(System.Nullable<int> value);
    partial void OnRTIdChanged();
    partial void OnPMIdChanging(System.Nullable<int> value);
    partial void OnPMIdChanged();
    #endregion
		
		public Item()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Estimations = new EntitySet<Estimation>(new Action<Estimation>(this.attach_Estimations), new Action<Estimation>(this.detach_Estimations));
			this._PM = default(EntityRef<PM>);
			this._RT = default(EntityRef<RT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RTId", DbType="Int")]
		public System.Nullable<int> RTId
		{
			get
			{
				return this._RTId;
			}
			set
			{
				if ((this._RTId != value))
				{
					if (this._RT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRTIdChanging(value);
					this.SendPropertyChanging();
					this._RTId = value;
					this.SendPropertyChanged("RTId");
					this.OnRTIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMId", DbType="Int")]
		public System.Nullable<int> PMId
		{
			get
			{
				return this._PMId;
			}
			set
			{
				if ((this._PMId != value))
				{
					if (this._PM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIdChanging(value);
					this.SendPropertyChanging();
					this._PMId = value;
					this.SendPropertyChanged("PMId");
					this.OnPMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Activity", Storage="_Activities", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Estimation", Storage="_Estimations", ThisKey="Id", OtherKey="ItemId")]
		public EntitySet<Estimation> Estimations
		{
			get
			{
				return this._Estimations;
			}
			set
			{
				this._Estimations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PM_Item", Storage="_PM", ThisKey="PMId", OtherKey="Id", IsForeignKey=true)]
		public PM PM
		{
			get
			{
				return this._PM.Entity;
			}
			set
			{
				PM previousValue = this._PM.Entity;
				if (((previousValue != value) 
							|| (this._PM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PM.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._PM.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._PMId = value.Id;
					}
					else
					{
						this._PMId = default(Nullable<int>);
					}
					this.SendPropertyChanged("PM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RT_Item", Storage="_RT", ThisKey="RTId", OtherKey="Id", IsForeignKey=true)]
		public RT RT
		{
			get
			{
				return this._RT.Entity;
			}
			set
			{
				RT previousValue = this._RT.Entity;
				if (((previousValue != value) 
							|| (this._RT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RT.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._RT.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._RTId = value.Id;
					}
					else
					{
						this._RTId = default(Nullable<int>);
					}
					this.SendPropertyChanged("RT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Estimations(Estimation entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Estimations(Estimation entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemTypes")]
	public partial class ItemType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Type;
		
		private string _Description;
		
		private EntitySet<PM> _PMs;
		
		private EntitySet<RT> _RTs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ItemType()
		{
			this._PMs = new EntitySet<PM>(new Action<PM>(this.attach_PMs), new Action<PM>(this.detach_PMs));
			this._RTs = new EntitySet<RT>(new Action<RT>(this.attach_RTs), new Action<RT>(this.detach_RTs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="ItemType", Storage="_Type", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_PM", Storage="_PMs", ThisKey="Type", OtherKey="ItemType")]
		public EntitySet<PM> PMs
		{
			get
			{
				return this._PMs;
			}
			set
			{
				this._PMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_RT", Storage="_RTs", ThisKey="Type", OtherKey="ItemType")]
		public EntitySet<RT> RTs
		{
			get
			{
				return this._RTs;
			}
			set
			{
				this._RTs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PMs(PM entity)
		{
			this.SendPropertyChanging();
			entity.ItemType1 = this;
		}
		
		private void detach_PMs(PM entity)
		{
			this.SendPropertyChanging();
			entity.ItemType1 = null;
		}
		
		private void attach_RTs(RT entity)
		{
			this.SendPropertyChanging();
			entity.ItemType1 = this;
		}
		
		private void detach_RTs(RT entity)
		{
			this.SendPropertyChanging();
			entity.ItemType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginHistory")]
	public partial class LoginHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Login;
		
		private string _Password;
		
		private System.DateTime _Date;
		
		private EntityRef<Person> _Person;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public LoginHistory()
		{
			this._Person = default(EntityRef<Person>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="Char(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_LoginHistory", Storage="_Person", ThisKey="Login", OtherKey="Login", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.LoginHistories.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.LoginHistories.Add(this);
						this._Login = value.Login;
					}
					else
					{
						this._Login = default(string);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persons")]
	public partial class Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private string _Login;
		
		private EntitySet<Activity> _Activities;
		
		private EntitySet<Estimation> _Estimations;
		
		private EntitySet<LoginHistory> _LoginHistories;
		
		private EntitySet<Teams2Person> _Teams2Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    #endregion
		
		public Person()
		{
			this._Activities = new EntitySet<Activity>(new Action<Activity>(this.attach_Activities), new Action<Activity>(this.detach_Activities));
			this._Estimations = new EntitySet<Estimation>(new Action<Estimation>(this.attach_Estimations), new Action<Estimation>(this.detach_Estimations));
			this._LoginHistories = new EntitySet<LoginHistory>(new Action<LoginHistory>(this.attach_LoginHistories), new Action<LoginHistory>(this.detach_LoginHistories));
			this._Teams2Persons = new EntitySet<Teams2Person>(new Action<Teams2Person>(this.attach_Teams2Persons), new Action<Teams2Person>(this.detach_Teams2Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="Char(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Activity", Storage="_Activities", ThisKey="Login", OtherKey="PersonLogin")]
		public EntitySet<Activity> Activities
		{
			get
			{
				return this._Activities;
			}
			set
			{
				this._Activities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Estimation", Storage="_Estimations", ThisKey="Login", OtherKey="PersonLogin")]
		public EntitySet<Estimation> Estimations
		{
			get
			{
				return this._Estimations;
			}
			set
			{
				this._Estimations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_LoginHistory", Storage="_LoginHistories", ThisKey="Login", OtherKey="Login")]
		public EntitySet<LoginHistory> LoginHistories
		{
			get
			{
				return this._LoginHistories;
			}
			set
			{
				this._LoginHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Teams2Person", Storage="_Teams2Persons", ThisKey="Login", OtherKey="Login")]
		public EntitySet<Teams2Person> Teams2Persons
		{
			get
			{
				return this._Teams2Persons;
			}
			set
			{
				this._Teams2Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Activities(Activity entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Estimations(Estimation entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Estimations(Estimation entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_LoginHistories(LoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_LoginHistories(LoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
		
		private void attach_Teams2Persons(Teams2Person entity)
		{
			this.SendPropertyChanging();
			entity.Person = this;
		}
		
		private void detach_Teams2Persons(Teams2Person entity)
		{
			this.SendPropertyChanging();
			entity.Person = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PM")]
	public partial class PM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Url;
		
		private byte _ItemType;
		
		private string _QmId;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<PM2RT> _PM2RTs;
		
		private EntityRef<ItemType> _ItemType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnItemTypeChanging(byte value);
    partial void OnItemTypeChanged();
    partial void OnQmIdChanging(string value);
    partial void OnQmIdChanged();
    #endregion
		
		public PM()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._PM2RTs = new EntitySet<PM2RT>(new Action<PM2RT>(this.attach_PM2RTs), new Action<PM2RT>(this.detach_PM2RTs));
			this._ItemType1 = default(EntityRef<ItemType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="Char(100) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="TinyInt NOT NULL")]
		public byte ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					if (this._ItemType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QmId", DbType="VarChar(10)")]
		public string QmId
		{
			get
			{
				return this._QmId;
			}
			set
			{
				if ((this._QmId != value))
				{
					this.OnQmIdChanging(value);
					this.SendPropertyChanging();
					this._QmId = value;
					this.SendPropertyChanged("QmId");
					this.OnQmIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PM_Item", Storage="_Items", ThisKey="Id", OtherKey="PMId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PM_PM2RT", Storage="_PM2RTs", ThisKey="Id", OtherKey="PMId")]
		public EntitySet<PM2RT> PM2RTs
		{
			get
			{
				return this._PM2RTs;
			}
			set
			{
				this._PM2RTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_PM", Storage="_ItemType1", ThisKey="ItemType", OtherKey="Type", IsForeignKey=true)]
		public ItemType ItemType1
		{
			get
			{
				return this._ItemType1.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType1.Entity;
				if (((previousValue != value) 
							|| (this._ItemType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType1.Entity = null;
						previousValue.PMs.Remove(this);
					}
					this._ItemType1.Entity = value;
					if ((value != null))
					{
						value.PMs.Add(this);
						this._ItemType = value.Type;
					}
					else
					{
						this._ItemType = default(byte);
					}
					this.SendPropertyChanged("ItemType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.PM = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.PM = null;
		}
		
		private void attach_PM2RTs(PM2RT entity)
		{
			this.SendPropertyChanging();
			entity.PM = this;
		}
		
		private void detach_PM2RTs(PM2RT entity)
		{
			this.SendPropertyChanging();
			entity.PM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PM2RT")]
	public partial class PM2RT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PMId;
		
		private int _RTId;
		
		private EntityRef<PM> _PM;
		
		private EntityRef<RT> _RT;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPMIdChanging(int value);
    partial void OnPMIdChanged();
    partial void OnRTIdChanging(int value);
    partial void OnRTIdChanged();
    #endregion
		
		public PM2RT()
		{
			this._PM = default(EntityRef<PM>);
			this._RT = default(EntityRef<RT>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PMId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PMId
		{
			get
			{
				return this._PMId;
			}
			set
			{
				if ((this._PMId != value))
				{
					if (this._PM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPMIdChanging(value);
					this.SendPropertyChanging();
					this._PMId = value;
					this.SendPropertyChanged("PMId");
					this.OnPMIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RTId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RTId
		{
			get
			{
				return this._RTId;
			}
			set
			{
				if ((this._RTId != value))
				{
					if (this._RT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRTIdChanging(value);
					this.SendPropertyChanging();
					this._RTId = value;
					this.SendPropertyChanged("RTId");
					this.OnRTIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PM_PM2RT", Storage="_PM", ThisKey="PMId", OtherKey="Id", IsForeignKey=true)]
		public PM PM
		{
			get
			{
				return this._PM.Entity;
			}
			set
			{
				PM previousValue = this._PM.Entity;
				if (((previousValue != value) 
							|| (this._PM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PM.Entity = null;
						previousValue.PM2RTs.Remove(this);
					}
					this._PM.Entity = value;
					if ((value != null))
					{
						value.PM2RTs.Add(this);
						this._PMId = value.Id;
					}
					else
					{
						this._PMId = default(int);
					}
					this.SendPropertyChanged("PM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RT_PM2RT", Storage="_RT", ThisKey="RTId", OtherKey="Id", IsForeignKey=true)]
		public RT RT
		{
			get
			{
				return this._RT.Entity;
			}
			set
			{
				RT previousValue = this._RT.Entity;
				if (((previousValue != value) 
							|| (this._RT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RT.Entity = null;
						previousValue.PM2RTs.Remove(this);
					}
					this._RT.Entity = value;
					if ((value != null))
					{
						value.PM2RTs.Add(this);
						this._RTId = value.Id;
					}
					else
					{
						this._RTId = default(int);
					}
					this.SendPropertyChanged("RT");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RT")]
	public partial class RT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Url;
		
		private byte _ItemType;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<PM2RT> _PM2RTs;
		
		private EntityRef<ItemType> _ItemType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    partial void OnItemTypeChanging(byte value);
    partial void OnItemTypeChanged();
    #endregion
		
		public RT()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._PM2RTs = new EntitySet<PM2RT>(new Action<PM2RT>(this.attach_PM2RTs), new Action<PM2RT>(this.detach_PM2RTs));
			this._ItemType1 = default(EntityRef<ItemType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="Char(100) NOT NULL", CanBeNull=false)]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemType", DbType="TinyInt NOT NULL")]
		public byte ItemType
		{
			get
			{
				return this._ItemType;
			}
			set
			{
				if ((this._ItemType != value))
				{
					if (this._ItemType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemTypeChanging(value);
					this.SendPropertyChanging();
					this._ItemType = value;
					this.SendPropertyChanged("ItemType");
					this.OnItemTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RT_Item", Storage="_Items", ThisKey="Id", OtherKey="RTId")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RT_PM2RT", Storage="_PM2RTs", ThisKey="Id", OtherKey="RTId")]
		public EntitySet<PM2RT> PM2RTs
		{
			get
			{
				return this._PM2RTs;
			}
			set
			{
				this._PM2RTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemType_RT", Storage="_ItemType1", ThisKey="ItemType", OtherKey="Type", IsForeignKey=true)]
		public ItemType ItemType1
		{
			get
			{
				return this._ItemType1.Entity;
			}
			set
			{
				ItemType previousValue = this._ItemType1.Entity;
				if (((previousValue != value) 
							|| (this._ItemType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemType1.Entity = null;
						previousValue.RTs.Remove(this);
					}
					this._ItemType1.Entity = value;
					if ((value != null))
					{
						value.RTs.Add(this);
						this._ItemType = value.Type;
					}
					else
					{
						this._ItemType = default(byte);
					}
					this.SendPropertyChanged("ItemType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.RT = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.RT = null;
		}
		
		private void attach_PM2RTs(PM2RT entity)
		{
			this.SendPropertyChanging();
			entity.RT = this;
		}
		
		private void detach_PM2RTs(PM2RT entity)
		{
			this.SendPropertyChanging();
			entity.RT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Name;
		
		private EntitySet<Teams2Person> _Teams2Persons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Team()
		{
			this._Teams2Persons = new EntitySet<Teams2Person>(new Action<Teams2Person>(this.attach_Teams2Persons), new Action<Teams2Person>(this.detach_Teams2Persons));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="Char(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Teams2Person", Storage="_Teams2Persons", ThisKey="Name", OtherKey="Team")]
		public EntitySet<Teams2Person> Teams2Persons
		{
			get
			{
				return this._Teams2Persons;
			}
			set
			{
				this._Teams2Persons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teams2Persons(Teams2Person entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = this;
		}
		
		private void detach_Teams2Persons(Teams2Person entity)
		{
			this.SendPropertyChanging();
			entity.Team1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teams2Persons")]
	public partial class Teams2Person : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Team;
		
		private string _Login;
		
		private System.DateTime _Date;
		
		private EntityRef<Person> _Person;
		
		private EntityRef<Team> _Team1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeamChanging(string value);
    partial void OnTeamChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Teams2Person()
		{
			this._Person = default(EntityRef<Person>);
			this._Team1 = default(EntityRef<Team>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Team", DbType="Char(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					if (this._Team1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="Char(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					if (this._Person.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Person_Teams2Person", Storage="_Person", ThisKey="Login", OtherKey="Login", IsForeignKey=true)]
		public Person Person
		{
			get
			{
				return this._Person.Entity;
			}
			set
			{
				Person previousValue = this._Person.Entity;
				if (((previousValue != value) 
							|| (this._Person.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Person.Entity = null;
						previousValue.Teams2Persons.Remove(this);
					}
					this._Person.Entity = value;
					if ((value != null))
					{
						value.Teams2Persons.Add(this);
						this._Login = value.Login;
					}
					else
					{
						this._Login = default(string);
					}
					this.SendPropertyChanged("Person");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Team_Teams2Person", Storage="_Team1", ThisKey="Team", OtherKey="Name", IsForeignKey=true)]
		public Team Team1
		{
			get
			{
				return this._Team1.Entity;
			}
			set
			{
				Team previousValue = this._Team1.Entity;
				if (((previousValue != value) 
							|| (this._Team1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team1.Entity = null;
						previousValue.Teams2Persons.Remove(this);
					}
					this._Team1.Entity = value;
					if ((value != null))
					{
						value.Teams2Persons.Add(this);
						this._Team = value.Name;
					}
					else
					{
						this._Team = default(string);
					}
					this.SendPropertyChanged("Team1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
